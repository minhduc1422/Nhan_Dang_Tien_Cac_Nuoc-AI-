import os
os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"

from ultralytics import YOLO
import cv2
import base64
import numpy as np
from fastapi import FastAPI, UploadFile, File, Response, Request, Form, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from fastapi.middleware.cors import CORSMiddleware
from io import BytesIO
from pathlib import Path
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.chains import RetrievalQA
from langchain.prompts import PromptTemplate
from langchain_community.embeddings import GPT4AllEmbeddings
from langchain_community.vectorstores import FAISS
from dotenv import load_dotenv
import mysql.connector
from mysql.connector import Error, pooling
from passlib.context import CryptContext
from googlesearch import search
import requests
from bs4 import BeautifulSoup
import uvicorn
import logging
from slowapi import Limiter
from slowapi.util import get_remote_address

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load API key and MySQL info from .env
load_dotenv(override=True)
api_key = os.getenv("GEMINI_API_KEY")
mysql_host = os.getenv("MYSQL_HOST")
mysql_user = os.getenv("MYSQL_USER")
mysql_password = os.getenv("MYSQL_PASSWORD", "")
mysql_database = os.getenv("MYSQL_DATABASE")

if not api_key:
    raise ValueError("API Key không hợp lệ. Vui lòng kiểm tra file .env hoặc đặt GEMINI_API_KEY.")
if not all([mysql_host, mysql_user, mysql_database]):
    raise ValueError("Thông tin MySQL không đầy đủ. Vui lòng kiểm tra file .env.")

# Paths
BASE_DIR = Path(__file__).resolve().parent
STATIC_DIR = BASE_DIR / "static"
vector_db_path = os.getenv("VECTOR_DB_PATH", "D:/thuc_tap_tot_nghiep/vectorstores/db_faiss")
model1_path = os.getenv("MODEL1_PATH", "D:/thuc_tap_tot_nghiep/run/train/ThaiLan/weights/best.pt")
model2_path = os.getenv("MODEL2_PATH", "D:/thuc_tap_tot_nghiep/runs/runs/train/train_money7/weights/best.pt")

# Check file existence
for path in [model1_path, model2_path]:
    if not os.path.exists(path):
        raise FileNotFoundError(f"File không tồn tại: {path}")

# Initialize FastAPI with rate limiter
app = FastAPI()
limiter = Limiter(key_func=get_remote_address)
app.state.limiter = limiter
app.mount("/static", StaticFiles(directory=STATIC_DIR), name="static")

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# MySQL connection pool
mysql_pool = pooling.MySQLConnectionPool(
    pool_name="mypool",
    pool_size=5,
    host=mysql_host,
    user=mysql_user,
    password=mysql_password,
    database=mysql_database
)

def get_db_connection():
    try:
        connection = mysql_pool.get_connection()
        if connection.is_connected():
            logger.info("Kết nối MySQL thành công!")
            return connection
    except Error as e:
        logger.error(f"Lỗi khi kết nối MySQL: {e}")
        return None

# Password hashing
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# Load YOLOv8 models
try:
    model1 = YOLO(model1_path)
    logger.info("Mô hình 1 (ThaiLan) đã được tải thành công.")
    model2 = YOLO(model2_path)
    logger.info("Mô hình 2 (VN) đã được tải thành công.")
except Exception as e:
    raise RuntimeError(f"Lỗi khi tải mô hình YOLO: {e}")

# Chatbot setup
def load_llm(api_key):
    try:
        llm = ChatGoogleGenerativeAI(
            model="gemini-1.5-pro",
            google_api_key=api_key,
            temperature=0.01,
            max_output_tokens=1024
        )
        return llm
    except Exception as e:
        raise RuntimeError(f"Lỗi khi khởi tạo mô hình LLM: {e}")

def read_vectors_db():
    try:
        embedding_model = GPT4AllEmbeddings(model_file=str(BASE_DIR / "model/all-MiniLM-L6-v2-f16.gguf"))
        db = FAISS.load_local(vector_db_path, embedding_model, allow_dangerous_deserialization=True)
        return db
    except Exception as e:
        raise RuntimeError(f"Lỗi khi đọc Vector Database: {e}")

def create_prompt(template):
    return PromptTemplate(template=template, input_variables=["context", "question"])

def create_qa_chain(prompt, llm, db):
    return RetrievalQA.from_chain_type(
        llm=llm,
        chain_type="stuff",
        retriever=db.as_retriever(search_kwargs={"k": 3}),
        return_source_documents=False,
        chain_type_kwargs={'prompt': prompt}
    )

# Initialize chatbot components
try:
    db = read_vectors_db()
    llm = load_llm(api_key)
    embedding_model = GPT4AllEmbeddings(model_file=str(BASE_DIR / "model/all-MiniLM-L6-v2-f16.gguf"))
    template = """<|im_start|>system
    Sử dụng thông tin sau đây để trả lời câu hỏi. Nếu không biết, hãy nói 'Tôi không biết'.
    {context}
    <|im_start|>user
    {question}
    <|im_start|>assistant"""
    prompt = create_prompt(template)
    llm_chain = create_qa_chain(prompt, llm, db)
except Exception as e:
    raise RuntimeError(f"Lỗi khi khởi tạo chatbot: {e}")

# YOLO image processing
def process_image_with_yolo(image: np.ndarray):
    results1 = model1(image)
    results2 = model2(image)
    combined_detections = []
    if results1 and results1[0].boxes:
        for r in results1[0].boxes:
            class_name = results1[0].names[int(r.cls)]
            confidence = float(r.conf)
            box = r.xyxy[0].tolist()
            combined_detections.append({"class": class_name, "confidence": confidence, "box": box, "model": "Campuchia"})
    if results2 and results2[0].boxes:
        for r in results2[0].boxes:
            class_name = results2[0].names[int(r.cls)]
            confidence = float(r.conf)
            box = r.xyxy[0].tolist()
            combined_detections.append({"class": class_name, "confidence": confidence, "box": box, "model": "VN"})
    annotated_image = image.copy()
    for detection in combined_detections:
        x1, y1, x2, y2 = map(int, detection["box"])
        label = f"{detection['model']}: {detection['class']} ({detection['confidence']:.2f})"
        color = (0, 255, 0) if detection["model"] == "Campuchia" else (255, 0, 0)
        cv2.rectangle(annotated_image, (x1, y1), (x2, y2), color, 2)
        cv2.putText(annotated_image, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
    return annotated_image, combined_detections

# Web search and Gemini processing
def fetch_top_5_web_content(query):
    try:
        urls = list(search(query, num_results=5, lang="vi"))
        web_contents = []
        for url in urls:
            try:
                response = requests.get(url, timeout=5)
                soup = BeautifulSoup(response.text, 'html.parser')
                text = ' '.join(p.get_text() for p in soup.find_all('p'))
                web_contents.append({"url": url, "content": text[:2000]})
            except Exception as e:
                logger.error(f"Lỗi khi truy xuất {url}: {e}")
        return web_contents
    except Exception as e:
        logger.error(f"Lỗi khi tìm kiếm web: {e}")
        return []

def process_with_gemini(web_contents, query):
    try:
        documents = [content["content"] for content in web_contents]
        if not documents:
            return "Không tìm thấy nội dung từ web để xử lý."
        vectors = embedding_model.embed_documents(documents)
        temp_db = FAISS.from_texts(documents, embedding_model)
        qa_chain = RetrievalQA.from_chain_type(
            llm=llm,
            chain_type="stuff",
            retriever=temp_db.as_retriever(search_kwargs={"k": 3}),
            return_source_documents=False,
            chain_type_kwargs={'prompt': prompt}
        )
        response = qa_chain.invoke({"query": query})
        return response["result"].strip()
    except Exception as e:
        logger.error(f"Lỗi khi xử lý với Gemini: {e}")
        return f"Không thể xử lý yêu cầu do lỗi API: {str(e)}"

# Routes
@app.get("/")
async def root():
    return FileResponse(STATIC_DIR / "index.html")

@app.post("/detect_money")
async def detect_money(file: UploadFile = File(...)):
    contents = await file.read()
    nparr = np.frombuffer(contents, np.uint8)
    image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
    if image is None:
        raise HTTPException(status_code=400, detail="Không thể đọc file ảnh!")
    
    annotated_image, detections = process_image_with_yolo(image)
    _, buffer = cv2.imencode('.jpg', annotated_image)
    image_base64 = base64.b64encode(buffer).decode()
    
    additional_info = ""
    if detections:
        predicted_class = detections[0]["class"]
        # Search Google and fetch top 5 pages
        web_contents = fetch_top_5_web_content(f"{predicted_class} tiền tệ")
        # Process with Gemini
        query = f"Thông tin chi tiết về '{predicted_class}' bao gồm mô tả, giá bán, và lịch sử hình thành."
        additional_info = process_with_gemini(web_contents, query)
    
    return {
        "image": f"data:image/jpeg;base64,{image_base64}",
        "detections": detections,
        "additional_info": additional_info
    }

@app.post("/chat")
@limiter.limit("5/minute")
async def chat(request: Request):
    data = await request.json()
    question = data.get("question")
    if not question:
        raise HTTPException(status_code=400, detail="Vui lòng cung cấp câu hỏi!")
    try:
        response = llm_chain.invoke({"query": question})
        logger.info(f"Chat response generated for question: {question}")
        return {"response": response["result"]}
    except Exception as e:
        logger.error(f"Chat error: {str(e)}")
        if "ResourceExhausted" in str(e) or "429" in str(e):
            return {
                "response": "Đã vượt quá giới hạn yêu cầu API Gemini. Vui lòng thử lại sau vài phút hoặc kiểm tra gói dịch vụ của bạn tại https://ai.google.dev/."
            }
        return {"response": f"Tôi không thể trả lời ngay bây giờ do lỗi: {str(e)}"}

@app.post("/login")
async def login(ten_kh: str = Form(...), mat_khau: str = Form(...)):
    connection = get_db_connection()
    if not connection:
        raise HTTPException(status_code=500, detail="Không thể kết nối đến cơ sở dữ liệu!")
    try:
        cursor = connection.cursor()
        query = "SELECT ten_kh, email, mat_khau FROM khach_hang WHERE ten_kh = %s"
        cursor.execute(query, (ten_kh,))
        user = cursor.fetchone()
        if user and pwd_context.verify(mat_khau, user[2]):
            token = base64.b64encode(f"{user[1]}:{user[0]}".encode()).decode()
            return {
                "message": "Đăng nhập thành công!",
                "user": {"ten_kh": user[0], "email": user[1]},
                "token": token
            }
        else:
            raise HTTPException(status_code=401, detail="Tên tài khoản hoặc mật khẩu không đúng!")
    except Error as e:
        raise HTTPException(status_code=500, detail=f"Lỗi khi truy vấn cơ sở dữ liệu: {e}")
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()

@app.post("/signup")
async def signup(ten_kh: str = Form(...), email: str = Form(...), mat_khau: str = Form(...)):
    connection = get_db_connection()
    if not connection:
        raise HTTPException(status_code=500, detail="Không thể kết nối đến cơ sở dữ liệu!")
    try:
        cursor = connection.cursor()
        query_check = "SELECT email FROM khach_hang WHERE email = %s"
        cursor.execute(query_check, (email,))
        if cursor.fetchone():
            raise HTTPException(status_code=400, detail="Email đã được đăng ký!")
        hashed_password = pwd_context.hash(mat_khau)
        query_insert = "INSERT INTO khach_hang (ten_kh, email, mat_khau) VALUES (%s, %s, %s)"
        cursor.execute(query_insert, (ten_kh, email, hashed_password))
        connection.commit()
        logger.info(f"Đăng ký thành công cho {email}")
        return {"message": "Đăng ký thành công!"}
    except Error as e:
        raise HTTPException(status_code=500, detail=f"Lỗi khi truy vấn cơ sở dữ liệu: {e}")
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()

@app.post("/forgot_password")
async def forgot_password(email: str = Form(...)):
    connection = get_db_connection()
    if not connection:
        raise HTTPException(status_code=500, detail="Không thể kết nối đến cơ sở dữ liệu!")
    try:
        cursor = connection.cursor()
        query = "SELECT email FROM khach_hang WHERE email = %s"
        cursor.execute(query, (email,))
        user = cursor.fetchone()
        if not user:
            raise HTTPException(status_code=404, detail="Email không tồn tại trong hệ thống!")
        return {"message": "Yêu cầu đặt lại mật khẩu đã được gửi! Vui lòng kiểm tra email của bạn."}
    except Error as e:
        raise HTTPException(status_code=500, detail=f"Lỗi khi truy vấn cơ sở dữ liệu: {e}")
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()

if __name__ == "__main__":
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    uvicorn.run(app, host="0.0.0.0", port=60074)